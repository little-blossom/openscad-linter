#!/usr/bin/env python

import argparse
import sys
import logging
import os
import re

LOG_MESSAGE_FORMAT_PLAIN = "%(message)s"
LOG_MESSAGE_FORMAT_VERBOSE = "%(asctime)s.%(msecs)03d %(levelname)-5s \
[%(threadName)s] %(filename)s:%(lineno)d - %(message)s"
LOG_DATE_FORMAT = "%Y-%m-%dT%H:%M:%S"


NAG_COUNT = 0


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--only-file', metavar='FILE',
                        help='Only lint FILE instead of all *.scad ' +
                        'files')
    parser.add_argument('-v', '--verbose',
                        action='count', default=0,
                        help='Increase verbosity of output')
    return parser.parse_args()


def setup_logging(verbosity=0, log_file=None):
    log_level_map = {
        1: logging.WARNING,
        2: logging.INFO,
        3: logging.DEBUG,
        }
    log_level = log_level_map.get(min(verbosity, 3), logging.ERROR)
    if log_level <= logging.INFO:
        message_format = LOG_MESSAGE_FORMAT_VERBOSE
    else:
        message_format = LOG_MESSAGE_FORMAT_PLAIN

    if log_file:
        log_file_abs = os.path.abspath(log_file)

        # Make sure log file's directory exists
        if not os.path.exists(os.path.dirname(log_file_abs)):
            os.makedirs(os.path.dirname(log_file_abs))

        # Root logger at DEBUG, so we get all logs into the log file
        logging.basicConfig(level=logging.DEBUG,
                            format=message_format,
                            datefmt=LOG_DATE_FORMAT,
                            filename=log_file_abs)
        # Console logger at user specified verbosity
        console_logger = logging.StreamHandler()
        console_logger.setLevel(log_level)
        console_logger.setFormatter(logging.Formatter(message_format))
        logging.getLogger('').addHandler(console_logger)
        logging.debug('Logging to "%s"' % (log_file))
    else:
        logging.basicConfig(level=log_level,
                            format=message_format,
                            datefmt=LOG_DATE_FORMAT)


def nag(code, msg, file_name, line='', col=''):
    global NAG_COUNT
    logging.error('%s:%s:%s: %s %s' % (file_name, line, col, code, msg))
    NAG_COUNT = NAG_COUNT+1


def get_expected_module_name(file_name):
    ret = os.path.basename(file_name)
    if ret.endswith('.scad'):
        ret = ret[:-5]
    ret = re.sub('_([a-z])', lambda p: p.group(1).upper(), ret)
    return ret


def lint_file(file_name):
    logging.debug('Linting file %s' % (file_name))

    expected_module_name = get_expected_module_name(file_name)
    has_expected_module = False
    has_tests = False

    with open(file_name, 'r') as f:
        line_number = 0
        for line in f:
            if line.endswith('\n'):
                line = line[:-1]
            logging.debug('Linting line %s' % (line))
            line_number += 1
            if line.startswith('module '):
                split = line[7:].split('(', 1)
                if len(split) == 2:
                    module_name = split[0]
                    if module_name == expected_module_name:
                        if has_expected_module:
                            nag('U007', 'module \'%s\' has already been \
defined' % (module_name), file_name, line_number, 7)
                        else:
                            has_expected_module = True
                    elif module_name.startswith("test"):
                        has_tests = True
                    else:
                        nag('U004', 'module \'%s\' neither expected nor test \
module' % (module_name), file_name, line_number, 7)
                else:
                    nag('U001', 'module definition without \'(\' on same line',
                        file_name, line_number, 7)

            match = re.search(',[^ ]', line)
            if match:
                nag('U005', 'missing space after comma', file_name,
                    line_number, match.start())

            match = re.search('[ 	]$', line)
            if match:
                nag('U006', 'trailing whitespace', file_name,
                    line_number, match.start())

    if has_expected_module and not has_tests:
            nag('U003', 'module \'%s\' does not have tests\
' % (expected_module_name), file_name)


def lint_files(f=None):
    if f:
        lint_file(f)
    else:
        for root, dirs, files in os.walk(os.getcwd()):
            for omitted in ['fixtures', 'test-results']:
                if omitted in dirs:
                    dirs.remove(omitted)
            for f in files:
                if f.endswith('.scad'):
                    lint_file(os.path.join(root, f))


def main():
    args = parse_args()

    setup_logging(args.verbose)

    lint_files(args.only_file)

    sys.exit(NAG_COUNT > 0)


if __name__ == "__main__":
    main()
