#!/usr/bin/env python

import argparse
import sys
import logging
import os
from openscad_linter import OpenscadLinter, OpenscadRecursiveLinter

LOG_MESSAGE_FORMAT_PLAIN = "%(message)s"
LOG_MESSAGE_FORMAT_VERBOSE = "%(asctime)s.%(msecs)03d %(levelname)-5s \
[%(threadName)s] %(filename)s:%(lineno)d - %(message)s"
LOG_DATE_FORMAT = "%Y-%m-%dT%H:%M:%S"


NAG_COUNT = 0


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--only-file', metavar='FILE', default=os.getcwd(),
                        help='Only lint FILE instead of all *.scad ' +
                        'files')
    parser.add_argument('-v', '--verbose',
                        action='count', default=0,
                        help='Increase verbosity of output')
    return parser.parse_args()


def setup_logging(verbosity=0, log_file=None):
    log_level_map = {
        1: logging.WARNING,
        2: logging.INFO,
        3: logging.DEBUG,
        }
    log_level = log_level_map.get(min(verbosity, 3), logging.ERROR)
    if log_level <= logging.INFO:
        message_format = LOG_MESSAGE_FORMAT_VERBOSE
    else:
        message_format = LOG_MESSAGE_FORMAT_PLAIN

    if log_file:
        log_file_abs = os.path.abspath(log_file)

        # Make sure log file's directory exists
        if not os.path.exists(os.path.dirname(log_file_abs)):
            os.makedirs(os.path.dirname(log_file_abs))

        # Root logger at DEBUG, so we get all logs into the log file
        logging.basicConfig(level=logging.DEBUG,
                            format=message_format,
                            datefmt=LOG_DATE_FORMAT,
                            filename=log_file_abs)
        # Console logger at user specified verbosity
        console_logger = logging.StreamHandler()
        console_logger.setLevel(log_level)
        console_logger.setFormatter(logging.Formatter(message_format))
        logging.getLogger('').addHandler(console_logger)
        logging.debug('Logging to "%s"' % (log_file))
    else:
        logging.basicConfig(level=log_level,
                            format=message_format,
                            datefmt=LOG_DATE_FORMAT)


def nag(code, msg, file_name, line='', col=''):
    global NAG_COUNT
    logging.error('%s:%s:%s: %s %s' % (file_name, line, col, code, msg))
    NAG_COUNT = NAG_COUNT+1


def main():
    args = parse_args()

    setup_logging(args.verbose)

    base_linter = OpenscadLinter(nag)
    linter = OpenscadRecursiveLinter(base_linter)

    linter.lint_files(args.only_file)

    sys.exit(NAG_COUNT > 0)


if __name__ == "__main__":
    main()
